// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	user2 "kratos-demo/internal/biz/user"
	"kratos-demo/internal/conf"
	"kratos-demo/internal/data/user"
	"kratos-demo/internal/registrar"
	user4 "kratos-demo/internal/server/user"
	user3 "kratos-demo/internal/service/user"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(server *conf.Server, data *conf.Data, confRegistrar *conf.Registrar, logger log.Logger) (*kratos.App, func(), error) {
	userData, cleanup, err := user.NewData(data, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := user.NewUserRepo(userData, logger)
	userUsecase := user2.NewUserUsecase(userRepo, logger)
	userService := user3.NewUserService(userUsecase, logger)
	grpcServer := user4.NewGRPCServer(server, userService, logger)
	httpServer := user4.NewHTTPServer(server, userService, logger)
	registry, err := registrar.NewNacos(confRegistrar, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	app := newApp(logger, grpcServer, httpServer, registry)
	return app, func() {
		cleanup()
	}, nil
}
